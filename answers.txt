# Partner 1
Name: Alan Kha
Student ID: 904030522
Email: akhahaha@gmail.com

# Partner 2 (if you're working in a team)
Name: Braden Anderson
Student ID: 203744563
Email: bradencanderson@gmail.com

# EXERCISE 1: What method you used to make your peer download and upload
#	 files in parallel?	 (~1-3 sentences)
Forking.

# EXERCISE 2A: What conditions did you find and fix that would have
#	 triggered a buffer overrun bug?  (~1-3 sentences each)
 - filename strcpy() in start_download().
 - disk_filename strcpy() in task_download().

# EXERCISE 2B: What other robustness problems did you fix?	(~1-3 sentences
#	 each)
 - Limited download size to TASKBUFSIZ*256 to preserve disk space.
 - Used memset() instead of strcpy() to zero filenames in task_new().
 - Checked download filename length.
 - Checked upload filename length.
 - Checked that requested files were within the current directory.
 - Denied immediate repeat requests from the same peer to prevent hogging.

# EXERCISE 3: Describe the attacks you implemented for "evil mode".	 Why
#	 are they attacks?	(~3-10 sentences each)
 - Mode 1: Attempt filename buffer overflow using strcpy() vulnerability in 
   skeleton code. Should overwrite other variables and cause peer to segfault.
 - Mode 2: Attempt DOS attack by flooding peers with repeat file requests.

# Extra credit problems
# Extra credit problem: none

# Add any other information you'd like us to know below this line.
